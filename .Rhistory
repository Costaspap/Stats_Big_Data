test_Y$murders = NULL
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.1)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
model <- glm(murders ~ .,train , family="poisson")
matrix(exp(pred),test_Y)
exp(pred)
class(exp(pred))
class(test_Y)
test_Y
test_Y = as.numeric(test_Y)
matrix(exp(pred),test_Y)
length(test_Y)
data.frame(exp(pred),test_Y)
mse(exp(pred),test_Y)
mse = sqrt((exp(pred)-test_Y)^2)
mse
mse = sqrt(mean((exp(pred)-test_Y)^2))
mse
useful
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson',alpha = 1, lambda = 0.002)
)
)
)
lj
h
e5
4
345ert()
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'binomial',alpha = 1, lambda = 0.002)
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
mean(data$murders)
table(data$murders)
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson',alpha = 1, lambda = 0.0002)
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson',alpha = 1)
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'gaussian',alpha = 1)
plot(lasso)
exp(-4)
lasso$lambda
lasso <-  glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson')
lasso <-  glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 0.8)
lasso <-  glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1)
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1)
lasso$lambda
plot(lasso)
coefs = coef(lasso)
coefs
max(coefs)
coefs = coef(lasso)
coefs
max(coefs)
min(coefs)
table(coefs)
table(as.numeric(coefs))
rownames(coefs)[(coefs[,1]>0.02)]
data = read.csv('CommViolPredUnnormalizedData.txt',sep = ';' , head = TRUE)
data[data == '?']<- NA
NAs = sapply(data, function(x) sum(is.na(x)))
NAs[NAs>0]
col_to_drop = c('state','communityname','countyCode','communityCode'
,'fold','PctOccupManu','murdPerPop','rapesPerPop',
'robbbPerPop','assaultPerPop','burglPerPop','larcPerPop'
,'autoTheftPerPop','arsonsPerPop','rapes','robberies',
'assaults','burglaries','larcenies','autoTheft','arsons',
'ViolentCrimesPerPop','nonViolPerPop', "LemasSwornFT",
"LemasSwFTPerPop","LemasSwFTFieldOps","LemasSwFTFieldPerPop","LemasTotalReq",
"LemasTotReqPerPop","PolicReqPerOffic","PolicPerPop","RacialMatchCommPol",
"PctPolicWhite","PctPolicBlack","PctPolicHisp","PctPolicAsian",
"PctPolicMinor","OfficAssgnDrugUnits","NumKindsDrugsSeiz","PolicAveOTWorked",
'PolicCars','PolicOperBudg','LemasPctPolicOnPatr','LemasGangUnitDeploy',
'PolicBudgPerPop')
data = data[ , -which(names(data) %in% col_to_drop)]
library(glmnet)
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train_Y = data[intrain,]$murders
train = data[intrain,]
train_X = data[intrain,]
train_X$murders = NULL
test_Y = as.numeric(data[-intrain,]$murders)
test_X = data[-intrain,]
test_X$murders = NULL
test_Y = as.numeric(test_Y)
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1)
plot(lasso)
```{r}
train_X
train_Y
coefs = coef(lasso)
coef
coefs
rownames(coefs)[(coefs[,1]>0.02)]
rownames(coefs)[(coefs[,1]>0.01)]
lasso <-  glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1, lambda = exp(-3))
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.01)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1)
lasso$lambda.1se
exp(-3)
lasso_final <-  glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1, lambda = lasso$lambda.1se)
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1)
coef(lasso)
coefs = coef(lasso)
rownames(coefs)[(coefs[,1]>0.01)]
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.01)]
train = train[,c(useful,'murders')]
useful
useful = useful[1:]
useful = useful[1:length(useful)]
useful = useful[2:length(useful)]
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.01)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
train
library(glmnet)
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train_Y = data[intrain,]$murders
train = data[intrain,]
train_X = data[intrain,]
train_X$murders = NULL
test_Y = as.numeric(data[-intrain,]$murders)
test_X = data[-intrain,]
test_X$murders = NULL
test_Y = as.numeric(test_Y)
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.01)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
model <- glm(murders ~ .,train , family="poisson")
pred = predict(model,test_X)
mse = sqrt(mean((exp(pred)-test_Y)^2))
mse
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.005)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
library(glmnet)
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train_Y = data[intrain,]$murders
train = data[intrain,]
train_X = data[intrain,]
train_X$murders = NULL
test_Y = as.numeric(data[-intrain,]$murders)
test_X = data[-intrain,]
test_X$murders = NULL
test_Y = as.numeric(test_Y)
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.005)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
model <- glm(murders ~ .,train , family="poisson")
pred = predict(model,test_X)
mse = sqrt(mean((exp(pred)-test_Y)^2))
mse
useful
library(glmnet)
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train_Y = data[intrain,]$murders
train = data[intrain,]
train_X = data[intrain,]
train_X$murders = NULL
test_Y = as.numeric(data[-intrain,]$murders)
test_X = data[-intrain,]
test_X$murders = NULL
test_Y = as.numeric(test_Y)
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.0005)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
model <- glm(murders ~ .,train , family="poisson")
pred = predict(model,test_X)
mse = sqrt(mean((exp(pred)-test_Y)^2))
mse
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.01)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
model <- glm(murders ~ .,train , family="poisson")
pred = predict(model,test_X)
mse = sqrt(mean((exp(pred)-test_Y)^2))
mse
lasso$cvm
lasso$name
lasso$lambda.min
library("XLConnect")
setwd('Stats_Big_Data')
if (!require("XLConnect")){
install.packages("XLConnect")
library("XLConnect")
}else{
library("XLConnect")
}
library("XLConnect")
wb <- loadWorkbook("myfile.xls", create = FALSE)
wb <- loadWorkbook("alldata together.xls", create = FALSE)
clas(wb)
class(wb)
wb
wb <- loadWorkbook("alldata together.xls", create = FALSE)
df1 <- readWorksheet(wb, sheet = "EG_gt_5yr")
df1
if (!require("gnumeric")){
install.packages("gnumeric")
library("gnumeric")
}else{
library("gnumeric")
}
data <- read.gnumeric.sheet(file = "alldata together.xls", head = FALSE, sheet.name = "EG_gt_5yr")
if (!require("xlsReadWrite")){
install.packages("xlsReadWrite")
library("xlsReadWrite")
}else{
library("xlsReadWrite")
}
data <- read.xls("alldata together.xls", colNames = F, sheet = "EG_gt_5yr", type = "data.frame", from = 1, checkNames = FALSE)
wb <- loadWorkbook("alldata together.xls", create = FALSE)
data <- readNamedRegion(wb, name = "EG_gt_5yr", header = FALSE)
wb <- loadWorkbook("alldata together.xls", create = FALSE)
data <- readNamedRegion(wb,sheet = "mysheet")
if (!require("readxl")){
install.packages("readxl")
library("readxl")
}else{
library("readxl")
}
library("readxl")
data = read_excel("alldata together.xls", na = "NA", sheet = 1 )
setwd('Stats_Big_Data')
install.packages("Rcpp")
install.packages("Rcpp")
library("Rcpp")
data = read_excel("alldata together.xls", na = "NA", sheet = 1 )
library("readxl")
data = read_excel("alldata together.xls", na = "NA", sheet = 1 )
if (!require("XLConnect")){
install.packages("XLConnect")
library("XLConnect")
}else{
library("XLConnect")
}
data = readWorksheetFromFile("alldata together.xls",
region = 'A1:CB24483')
XLConnect::loadWorkbook
data = loadWorkbook("alldata together.xls",
region = 'A1:CB24483')
install.packages("XLConnect", dependencies=TRUE)
install.packages("XLConnect", dependencies = TRUE)
install.packages("XLConnect", dependencies = TRUE)
install.packages("XLConnect", dependencies = TRUE)
install.packages("XLConnect", dependencies = TRUE)
if (!require("XLConnect")){
install.packages("XLConnect", dependencies=TRUE)
library("XLConnect")
}else{
library("XLConnect")
}
data = loadWorkbook("alldata together.xls",
region = 'A1:CB24483')
data = readWorksheetFromFile("alldata together.xls",
region = 'A1:CB24483')
if (!require("xlsx")){
install.packages("xlsx", dependencies=TRUE)
library("xlsx")
}else{
library("xlsx")
}
library("xlsx")
data = read.xlsx("alldata together.xls",
sheetIndex = 1)
data = read.xlsx2("alldata together.xls",
sheetIndex = 1, endrow = 24483, colIndex = seq(1,80,1))
data = read.xlsx2("alldata together.xls",
sheetIndex = 1, endrow = 24483, colIndex = seq(1,80,1), header = FALSE)
if (!require("openxlsx")){
install.packages("openxlsx", dependencies=TRUE)
library("openxlsx")
}else{
library("openxlsx")
}
data = read.xlsx("alldata together.xls",
sheet = 1, rows = seq(1,24483,1), cols = seq(1,80,1), na.strings = 'NaN',colNames = FALSE)
data = read.xls("alldata together.xls",
sheet = 1, blank.lines.skip=TRUE, na.strings = 'NaN')
if (!require("gdata")){
install.packages("gdata", dependencies=TRUE)
library("gdata")
}else{
library("gdata")
}
data = read.xls("alldata together.xls",
sheet = 1, blank.lines.skip=TRUE, na.strings = 'NaN')
data = read.xls("alldata together.xls",
sheet = 1, blank.lines.skip=TRUE, na.strings = 'NaN', perl="perl")
library("gdata")
data = read.xls("alldata together.xls",
sheet = 1, blank.lines.skip=TRUE, na.strings = 'NaN', perl="perl")
data = read.xls("alldata together.xls",
sheet = 1, blank.lines.skip=TRUE, na.strings = 'NaN',
perl="C:\Users\Kostas\Documents\R\win-library\3.5\gdata\bin\xls2csv")
data = read.xls("alldata together.xls",
sheet = 1, blank.lines.skip=TRUE, na.strings = 'NaN',
perl="C:\\Users\\Kostas\\Documents\\R\\win-library\\3.5\\gdata\\bin\\xls2csv")
data = read.xls("alldata together.xls",
sheet = 1, blank.lines.skip=TRUE, na.strings = 'NaN',
perl="C:\\Users\\Kostas\\Documents\\R\\win-library\\3.5\\gdata\\bin\\xls2csv")
data = read.xls("alldata together.xls",
sheet = 1, blank.lines.skip=TRUE, na.strings = 'NaN',
perl="xls2csv")
setwd('Stats_Big_Data')
data = read.xls("alldata together.xls",
sheet = 1, blank.lines.skip=TRUE, na.strings = 'NaN',
perl="C:\\Users\\Kostas\\Documents\\R\\win-library\\3.5\\gdata\\bin\\xls2csv")
setwd("C:\\Users\\Kostas\\Documents\\R\\win-library\\3.5\\gdata\\bin\\xls2csv")
if (!require("RODBC")){
install.packages("RODBC", dependencies=TRUE)
library("RODBC")
}else{
library("RODBC")
}
conn = odbcConnectExcel("alldata together.xls") # open a connection to the Excel file
sqlTables(conn)$TABLE_NAME # show all sheets
df = sqlFetch(conn, "EG_gt_5yr") # read a sheet
close(conn) # close the connection to the file
if (!require("xlsReadWrite")){
install.packages("xlsReadWrite", dependencies=TRUE)
library("xlsReadWrite")
}else{
library("xlsReadWrite")
}
data = read.csv("alldata together.csv", header = FALSE, na.strings = 'NaN')
data
head(data)
if (!require("data.table")){
install.packages("data.table", dependencies=TRUE)
library("data.table")
}else{
library("data.table")
}
library("data.table")
data_transpose <- data.frame(transpose(data))
data = data.frame(transpose(read.csv("alldata together.csv", header = FALSE, na.strings = 'NaN'))
)
head(data)
names(data)
data[:,1]
data[,1]
grepl("age ([1-9][1-9])", data[,1], ignore.case = T)
data[1,c(1,2,3)]
data[2,c(1,2,3)]
data[3,c(1,2,3)]
data[2,c(1,2,3)]
data[2,c(1,2,3,4,5,6,7,8,9)]
data[2,c(1,2,3,4,5,6,7,8,9,10,11,12,13)]
data[2,]
data = data.frame(transpose(read.csv("alldata together.csv", header = FALSE, na.strings = 'NaN')))
data[,1]
data[1,c(1,2,3,4)]
colnames(data) = data[1, ]
data = data[-1,]
data[1,c(1,2,3,4,5)]
grepl("age ([0-9][0-9][0-9]*)", data[,1])
if (!require("data.table")){
install.packages("data.table", dependencies=TRUE)
library("data.table")
}
else if(!require("stringr")){
install.packages("stringr", dependencies=TRUE)
library("stringr")
}
else{
library("data.table")
library('stringr')
}
if (!require("data.table")){
install.packages("data.table", dependencies=TRUE)
library("data.table")
}else if(!require("stringr")){
install.packages("stringr", dependencies=TRUE)
library("stringr")
}else{
library("data.table")
library('stringr')
}
str_extract(data[,1], "age ([0-9][0-9][0-9]*)")
str_match(data[,1], "age ([0-9][0-9][0-9]*)")
str_match(data[,1], "age ([0-9][0-9])")
data[,1]
str_match(data[,1], "age ([0-9][0-9])")
data[,1]
data[,1]
data$age = str_match(data[,1], "age ([0-9][0-9])")[2]
data$age
data$age = str_match(data[,1], "age ([0-9][0-9])")[1]
data$age
str_match(data[,1], "age ([0-9][0-9])")
data$age = str_match(data[,1], "age ([0-9][0-9])")[,2]
data$age
data[1,"age"]
data[1,81]
data[,c(81)]
data[,c(24484)]
data[,c(24483)]
data[,c(1,24483)]
str_match(data[,1], "erp (yes|no)")[,2]
str_replace_all(str_match(data[,1], "erp (yes|no)")[,2],c("yes","no",NA),c(1,0,0))
str_replace_all(str_match(data[,1], "erp (yes|no)")[,2],c("yes","no",NA),c("1","0","0"))
data$erp = str_match(data[,1], "erp (yes|no)")[,2]
data$erp
ifelse(data$erp=="yes", 1, 0)
ifelse(data$erp=="yes"| !is.null(data$erp), 1, 0)
ifelse(data$erp=="yes" &!is.null(data$erp), 1, 0)
is.null(data$erp)
is.na(data$erp)
ifelse(data$erp=="yes" &!is.na(data$erp), 1, 0)
data[,1]
data$target = str_match(data[,1], ".5 yr survival")[,2]
str_match(data[,1], ".5 yr survival")[,2]
str_match(data[,1], ".5 yr survival")
data$target = str_match(data[,1], ".5 yr survival")
data$target = str_match(data[,1], ".5 yr survival")
data$target = ifelse(data$erp==">5 yr survival" , 1, 0)
data$target
data$target = str_match(data[,1], ".5 yr survival")
data$target = ifelse(data$target==">5 yr survival" , 1, 0)
data$target
data = data[-1,]
data[,1]
data = data.frame(transpose(read.csv("alldata together.csv", header = FALSE, na.strings = 'NaN')))
colnames(data) = data[1, ]
data = data[-1,]
data$age = str_match(data[,1], "age ([0-9][0-9])")[,2]
data$erp = str_match(data[,1], "erp (yes|no)")[,2]
data$erp = ifelse(data$erp=="yes" & !is.na(data$erp), 1, 0)
data$target = str_match(data[,1], ".5 yr survival")
data$target = ifelse(data$target==">5 yr survival" , 1, 0)
data = data[,-1]
data[,1]
size(data)
sumamry(data)
nrow(data)
ncol(data)
names(data)
data = data.frame(transpose(read.csv("alldata together.csv", header = FALSE, na.strings = 'NaN')))
colnames(data) = trimws(data[1, ],which = 'right')
data = data[-1,]
data$age = str_match(data[,1], "age ([0-9][0-9])")[,2]
data$erp = str_match(data[,1], "erp (yes|no)")[,2]
data$erp = ifelse(data$erp=="yes" & !is.na(data$erp), 1, 0)
data$target = str_match(data[,1], ".5 yr survival")
data$target = ifelse(data$target==">5 yr survival" , 1, 0)
data = data[,-1]
names(data)
write.csv(data,'preprocessed.csv')
write.csv(data,'preprocessed.csv', row.names=FALSE)
data$erp
data$target
class(data$erp)
class(data$target)
data = data.frame(transpose(read.csv("alldata together.csv", header = FALSE, na.strings = 'NaN')))
colnames(data) = trimws(data[1, ],which = 'right')
data = data[-1,]
data$age = str_match(data[,1], "age ([0-9][0-9])")[,2]
data$erp = str_match(data[,1], "erp (yes|no)")[,2]
data$erp = ifelse(data$erp=="yes" & !is.na(data$erp), 1, 0)
data$target = str_match(data[,1], ".5 yr survival")[0]
data$target = ifelse(data$target==">5 yr survival" , 1, 0)
data = data[,-1]
data$target = str_match(data[,1], ".5 yr survival")
data$target = as.numeric(ifelse(data$target==">5 yr survival" , 1, 0))
data = data.frame(transpose(read.csv("alldata together.csv", header = FALSE, na.strings = 'NaN')))
colnames(data) = trimws(data[1, ],which = 'right')
data = data[-1,]
data$age = str_match(data[,1], "age ([0-9][0-9])")[,2]
data$erp = str_match(data[,1], "erp (yes|no)")[,2]
data$erp = ifelse(data$erp=="yes" & !is.na(data$erp), 1, 0)
data$target = str_match(data[,1], ".5 yr survival")
data$target = as.numeric(ifelse(data$target==">5 yr survival" , 1, 0))
data = data[,-1]
class(data$target)
data$target
write.csv(data,'preprocessed.csv', row.names=FALSE)
data$erp
data$target
