train_X[,48:149]
train_X[,48:148]
cleaned_data[,149]
cv.lasso <- cv.glmnet(as.matrix(train_X[,48:148]), as.matrix(train_Y), family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
sapply(cleaned_data,sum)
sapply(cleaned_data,class)
sapply(cleaned_data,sum)
sapply(cleaned_data,2,sum)
lapply(cleaned_data,2,sum)
apply(cleaned_data,2,sum)
which(is.na(as.numeric(as.character(cleaned_data[[1]]))))
which(is.na(as.numeric(as.character(data[[1]]))))
train_X[,48:149]
train_X[,48:14]
train_X[,48:148]
cv.lasso <- cv.glmnet(as.matrix(train_X[,48:148]), as.matrix(train_Y), family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
cv.lasso <- cv.glmnet(as.matrix(train_X[,48:148]), as.matrix(train_Y), family='gaussian', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
as.matrix(train_Y)
as.matrix(train_X[,48:148]
)
cv.lasso <- cv.glmnet(as.matrix(train_X[,48:148]), as.matrix(train_Y), family='gaussian', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
cv.lasso
install.packages('glmregNB')
lasso <- glmnet(as.matrix(train_X[,48:148]), as.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.13)
coef(lasso)
lasso <- glmnet(as.matrix(train_X[,48:148]), as.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.5)
lasso <- glmnet(as.matrix(train_X[,48:148]), as.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
coef(lasso)
coef(lasso)[coef(lasso)>1]
coef(lasso)[coef(lasso)>0.1]
names(coef(lasso)[coef(lasso)>0.1])
names(data.frame(coef(lasso)[coef(lasso)>0.1]))
coef(lasso)[coef(lasso)>0.1])
coef(lasso)[coef(lasso)>0.1]))
coef(lasso)[coef(lasso)>0.1]
class(coef(lasso)[coef(lasso)>0.1])
class(coef(lass))
class(coef(lasso))
colnames(coef(lasso))
rownames(coef(lasso))
rownames(coef(lasso)[coef(lasso)>0.1])
rownames(coef(lasso))[coef(lasso)>0.1]
coef(lasso)
coef(lasso)[1]
rbind(rownames(coef(lasso),coef(lasso))
)
rownames(coef(lasso))
coefs = coef(lasso)[:]
coefs = coef(lasso)[]
coefs
coefs
coefs[0:-1]
length(coefs)
coefs[0:102]
coefs[1:102]
rownames(coefs)
rownames(coefs[coefs = coefs[1:102]])
rownames(coefs[coefs = coefs[coefs>0.1])
rownames(coefs[coefs = coefs[coefs>0.1]])
rownames(coefs[coefs == coefs[coefs>0.1]])
rownames(coefs[coefs[coefs>0.1]])
coefs >1
coefs >0.1
coefs
coefs >0.01
coefs >51
coefs
lasso.predict(test_Y)
predict(lasso,test_X)
predict(lasso,as.matrix(test_X))
predict(lasso,as.matrix(test_X[,48:148]))
test_X[,48:148]
predict(lasso,as.matrix(test_X[1:#,48:148]))
3
*
()
predict(lasso,as.matrix(test_X[1:3,48:148]))
names(test_X)
data = read.csv('CommViolPredUnnormalizedData.txt',sep = ';' , head = TRUE)
data[data == '?']<- NA
NAs = sapply(data, function(x) sum(is.na(x)))
NAs[NAs>0]
col_to_drop = c('state','communityname','countyCode','communityCode'
,'fold','PctOccupManu','murdPerPop','rapesPerPop',
'robbbPerPop','assaultPerPop','burglPerPop','larcPerPop'
,'autoTheftPerPop','arsonsPerPop','rapes','robberies',
'assaults','burglaries','larcenies','autoTheft','arsons',
'ViolentCrimesPerPop','nonViolPerPop', "LemasSwornFT",
"LemasSwFTPerPop","LemasSwFTFieldOps","LemasSwFTFieldPerPop","LemasTotalReq",
"LemasTotReqPerPop","PolicReqPerOffic","PolicPerPop","RacialMatchCommPol",
"PctPolicWhite","PctPolicBlack","PctPolicHisp","PctPolicAsian",
"PctPolicMinor","OfficAssgnDrugUnits","NumKindsDrugsSeiz","PolicAveOTWorked",
'PolicCars','PolicOperBudg','LemasPctPolicOnPatr','LemasGangUnitDeploy',
'PolicBudgPerPop')
data = data[ , -which(names(data) %in% col_to_drop)]
cleaned_data = cleaned_data[ ,
-which(names(cleaned_data) %in% c('X.Intercept.'))]
col_to_drop = c('state','communityname','countyCode','communityCode'
,'fold','PctOccupManu','murdPerPop','rapesPerPop',
'robbbPerPop','assaultPerPop','burglPerPop','larcPerPop'
,'autoTheftPerPop','arsonsPerPop','rapes','robberies',
'assaults','burglaries','larcenies','autoTheft','arsons',
'ViolentCrimesPerPop','nonViolPerPop', "LemasSwornFT",
"LemasSwFTPerPop","LemasSwFTFieldOps","LemasSwFTFieldPerPop","LemasTotalReq",
"LemasTotReqPerPop","PolicReqPerOffic","PolicPerPop","RacialMatchCommPol",
"PctPolicWhite","PctPolicBlack","PctPolicHisp","PctPolicAsian",
"PctPolicMinor","OfficAssgnDrugUnits","NumKindsDrugsSeiz","PolicAveOTWorked",
'PolicCars','PolicOperBudg','LemasPctPolicOnPatr','LemasGangUnitDeploy',
'PolicBudgPerPop')
data = data[ , -which(names(data) %in% col_to_drop)]
library(glmnet)
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train_Y = data[intrain,]$murders
train_X = data[intrain,]
train_X$murders = NULL
test_Y = data[-intrain,]$murders
test_X = data[-intrain,]
test_Y$murders = NULL
lasso <- glmnet(as.matrix(train_X), as.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
data
data = read.csv('CommViolPredUnnormalizedData.txt',sep = ';' , head = TRUE)
data[data == '?']<- NA
NAs = sapply(data, function(x) sum(is.na(x)))
NAs[NAs>0]
col_to_drop = c('state','communityname','countyCode','communityCode'
,'fold','PctOccupManu','murdPerPop','rapesPerPop',
'robbbPerPop','assaultPerPop','burglPerPop','larcPerPop'
,'autoTheftPerPop','arsonsPerPop','rapes','robberies',
'assaults','burglaries','larcenies','autoTheft','arsons',
'ViolentCrimesPerPop','nonViolPerPop', "LemasSwornFT",
"LemasSwFTPerPop","LemasSwFTFieldOps","LemasSwFTFieldPerPop","LemasTotalReq",
"LemasTotReqPerPop","PolicReqPerOffic","PolicPerPop","RacialMatchCommPol",
"PctPolicWhite","PctPolicBlack","PctPolicHisp","PctPolicAsian",
"PctPolicMinor","OfficAssgnDrugUnits","NumKindsDrugsSeiz","PolicAveOTWorked",
'PolicCars','PolicOperBudg','LemasPctPolicOnPatr','LemasGangUnitDeploy',
'PolicBudgPerPop')
data = data[ , -which(names(data) %in% col_to_drop)]
nrow(data)
data
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train_Y = data[intrain,]$murders
train_X = data[intrain,]
train_X$murders = NULL
test_Y = data[-intrain,]$murders
test_X = data[-intrain,]
test_Y$murders = NULL
lasso <- glmnet(as.matrix(train_X), as.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
predict(lasso,test_X)
predict(lasso,as.matrix(test_X))
predict(lasso,newx = as.matrix(test_X))
predict(lasso,newx = as.matrix(test_X), type="response",)
as.matrix(test_X)
predict(lasso,newx = datamatrix(test_X), type="response",)
predict(lasso,newx = data.matrix(test_X), type="response",)
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
predict(lasso,newx = data.matrix(test_X), type="response",)
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
coef(lasso) %in% coef(lasso)[coef(lasso)>0.1]
coef(lasso)[coef(lasso)>0.1]
val = coef(lasso)[coef(lasso)>0.1]
val
coef(lasso)[coef(lasso) %in% val]
coef(lasso) == val
coef(lasso)[val]
rownames(coef(lasso))[coef(lasso)>0.1]
coef(lasso)[,1]
coef(lasso)[1,]
coef(lasso)[,1]>0.1
rownames(coef(lasso)[coef(lasso)[,1]>0.1])
rownames(coef(lasso)[coef(lasso)[,1]>0.1,1])
rownames(coef(lasso)[coef(lasso)[,1]>0.1][,1])
coef(lasso)[,1]>0.1
(coef(lasso)[,1]>0.1)[]
(coef(lasso)[,1]>0.1)[1:120]
(coef(lasso)[,1]>0.1)[1:104]
(coef(lasso)[,1]>0.1)[1:102]
coef(lasso)[(coef(lasso)[,1]>0.1)]
rownames(coef(lasso))[(coef(lasso)[,1]>0.1)]
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.1)]
reg = lm(murders ~ .,train_X[,useful])
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train = data[intrain,]
test_Y = data[-intrain,]$murders
test_X = data[-intrain,]
test_Y$murders = NULL
reg = lm(murders ~ .,train_X[,useful])
names(trainnames(train))
names(train)
reg = lm(murders ~ .,train[,useful])
library(glmnet)
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train = data[intrain,]
test_Y = data[-intrain,]$murders
test_X = data[-intrain,]
test_Y$murders = NULL
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.1)]
reg = lm(murders ~ .,train[,useful])
data$murders
train$murders
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.1)]
train = train[,c(useful,'murders')]
reg = lm(murders ~ .,train)
summary(reg)
reg = glm(murders ~ .,train, family="binomial")
reg = glm(murders ~ .,train, family="multinomial")
reg = glm(murders ~ .,train, family="poisson")
summary(reg)
reg = glm(murders ~ .,train, family="NB")
reg = glm(murders ~ .,train, family="negativebinomial")
reg = glm(murders ~ .,train, family="poisson")
predict(reg,test_X)
reg = lm(murders ~ .,train)
rownames(coefs)
useful
model <- glm(murders ~ .,train, family="binomial")
runif(7,0,100)
n <- 500
x1 <- runif(n,0,100)
x2 <- runif(n,0,100)
y <- (x2 - x1 + rnorm(n,sd=20)) < 0
model <- glm(y ~ x1 + x2, family="binomial")
y
x2
x2 - x1 + rnorm(n,sd=20)
(x2 - x1 + rnorm(n,sd=20)) < 0
library(MASS)
summary(m1 <- glm.nb(murders ~ ., data = train))
predict(m1,test_X)
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
model <- glm(murders ~ .,train , family="poisson")
predict(model,test_X)
pred = predict(model,test_X)
min(pred)
max(pred)
max(data$murders)
exp(pred)
matrix(exp(pred),test_Y)
test_X
test_Y
as.numeric(test_Y)
test_Y = as.numeric(data[-intrain,]$murders)
library(glmnet)
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train_Y = data[intrain,]$murders
train = data[intrain,]
train_X = data[intrain,]
train_X$murders = NULL
test_Y = as.numeric(data[-intrain,]$murders)
test_X = data[-intrain,]
test_Y$murders = NULL
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.1)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
model <- glm(murders ~ .,train , family="poisson")
matrix(exp(pred),test_Y)
exp(pred)
class(exp(pred))
class(test_Y)
test_Y
test_Y = as.numeric(test_Y)
matrix(exp(pred),test_Y)
length(test_Y)
data.frame(exp(pred),test_Y)
mse(exp(pred),test_Y)
mse = sqrt((exp(pred)-test_Y)^2)
mse
mse = sqrt(mean((exp(pred)-test_Y)^2))
mse
useful
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson',alpha = 1, lambda = 0.002)
)
)
)
lj
h
e5
4
345ert()
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'binomial',alpha = 1, lambda = 0.002)
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'gaussian',alpha = 1, lambda = 0.002)
mean(data$murders)
table(data$murders)
lasso <- glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson',alpha = 1, lambda = 0.0002)
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson',alpha = 1)
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'gaussian',alpha = 1)
plot(lasso)
exp(-4)
lasso$lambda
lasso <-  glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson')
lasso <-  glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 0.8)
lasso <-  glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1)
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1)
lasso$lambda
plot(lasso)
coefs = coef(lasso)
coefs
max(coefs)
coefs = coef(lasso)
coefs
max(coefs)
min(coefs)
table(coefs)
table(as.numeric(coefs))
rownames(coefs)[(coefs[,1]>0.02)]
data = read.csv('CommViolPredUnnormalizedData.txt',sep = ';' , head = TRUE)
data[data == '?']<- NA
NAs = sapply(data, function(x) sum(is.na(x)))
NAs[NAs>0]
col_to_drop = c('state','communityname','countyCode','communityCode'
,'fold','PctOccupManu','murdPerPop','rapesPerPop',
'robbbPerPop','assaultPerPop','burglPerPop','larcPerPop'
,'autoTheftPerPop','arsonsPerPop','rapes','robberies',
'assaults','burglaries','larcenies','autoTheft','arsons',
'ViolentCrimesPerPop','nonViolPerPop', "LemasSwornFT",
"LemasSwFTPerPop","LemasSwFTFieldOps","LemasSwFTFieldPerPop","LemasTotalReq",
"LemasTotReqPerPop","PolicReqPerOffic","PolicPerPop","RacialMatchCommPol",
"PctPolicWhite","PctPolicBlack","PctPolicHisp","PctPolicAsian",
"PctPolicMinor","OfficAssgnDrugUnits","NumKindsDrugsSeiz","PolicAveOTWorked",
'PolicCars','PolicOperBudg','LemasPctPolicOnPatr','LemasGangUnitDeploy',
'PolicBudgPerPop')
data = data[ , -which(names(data) %in% col_to_drop)]
library(glmnet)
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train_Y = data[intrain,]$murders
train = data[intrain,]
train_X = data[intrain,]
train_X$murders = NULL
test_Y = as.numeric(data[-intrain,]$murders)
test_X = data[-intrain,]
test_X$murders = NULL
test_Y = as.numeric(test_Y)
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1)
plot(lasso)
```{r}
train_X
train_Y
coefs = coef(lasso)
coef
coefs
rownames(coefs)[(coefs[,1]>0.02)]
rownames(coefs)[(coefs[,1]>0.01)]
lasso <-  glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1, lambda = exp(-3))
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.01)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1)
lasso$lambda.1se
exp(-3)
lasso_final <-  glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1, lambda = lasso$lambda.1se)
lasso <-  cv.glmnet(data.matrix(train_X), data.matrix(train_Y),
family = 'poisson', alpha = 1)
coef(lasso)
coefs = coef(lasso)
rownames(coefs)[(coefs[,1]>0.01)]
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.01)]
train = train[,c(useful,'murders')]
useful
useful = useful[1:]
useful = useful[1:length(useful)]
useful = useful[2:length(useful)]
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.01)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
train
library(glmnet)
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train_Y = data[intrain,]$murders
train = data[intrain,]
train_X = data[intrain,]
train_X$murders = NULL
test_Y = as.numeric(data[-intrain,]$murders)
test_X = data[-intrain,]
test_X$murders = NULL
test_Y = as.numeric(test_Y)
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.01)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
model <- glm(murders ~ .,train , family="poisson")
pred = predict(model,test_X)
mse = sqrt(mean((exp(pred)-test_Y)^2))
mse
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.005)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
library(glmnet)
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train_Y = data[intrain,]$murders
train = data[intrain,]
train_X = data[intrain,]
train_X$murders = NULL
test_Y = as.numeric(data[-intrain,]$murders)
test_X = data[-intrain,]
test_X$murders = NULL
test_Y = as.numeric(test_Y)
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.005)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
model <- glm(murders ~ .,train , family="poisson")
pred = predict(model,test_X)
mse = sqrt(mean((exp(pred)-test_Y)^2))
mse
useful
library(glmnet)
set.seed('1992')
intrain = sample(1:nrow(data), 3*nrow(data)/4)
train_Y = data[intrain,]$murders
train = data[intrain,]
train_X = data[intrain,]
train_X$murders = NULL
test_Y = as.numeric(data[-intrain,]$murders)
test_X = data[-intrain,]
test_X$murders = NULL
test_Y = as.numeric(test_Y)
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.0005)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
model <- glm(murders ~ .,train , family="poisson")
pred = predict(model,test_X)
mse = sqrt(mean((exp(pred)-test_Y)^2))
mse
coefs = coef(lasso)
useful = rownames(coefs)[(coefs[,1]>0.01)]
useful = useful[2:length(useful)]
train = train[,c(useful,'murders')]
test_X = test_X[,useful]
model <- glm(murders ~ .,train , family="poisson")
pred = predict(model,test_X)
mse = sqrt(mean((exp(pred)-test_Y)^2))
mse
lasso$cvm
lasso$name
lasso$lambda.min
github_url = 'https://github.com/Costaspap/Stats_Big_Data/blob/master/alldata%20together.xls'
setwd('Stats_Big_Data')
if(!file.exists('project_data.xls')){
download.file(github_url,destfile="project_data.xls",method="auto")
)
if(!file.exists('project_data.xls')){
download.file(github_url,destfile="project_data.xls",method="auto")
}
github_url = 'https://github.com/Costaspap/Stats_Big_Data/raw/master/alldata%20together.xls'
if(!file.exists('project_data.xls')){
download.file(github_url,destfile="project_data.xls",method="auto")
}
require("XLConnect")
if !require("XLConnect"){
install.packages("XLConnect")
library("XLConnect")
}
if (!require("XLConnect")){
install.packages("XLConnect")
library("XLConnect")
}else{
library("XLConnect")
}
uninstall.packages('XLConnect')
remove.packages('XLConnect')
library("XLConnect")
remove.packages('XLConnect')
remove.packages('XLConnect')
